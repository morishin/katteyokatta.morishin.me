// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin", "linux-musl"]
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  associateTag  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  comment   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id])
}

model Item {
  id                    Int                        @id @default(autoincrement())
  asin                  String                     @unique
  name                  String                     @db.VarChar(1000)
  image                 String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  posts                 Post[]
  similarities          ItemSimilarity[]           @relation("item")
  reversedSimilarities  ItemSimilarity[]           @relation("targetItem")
  similarityCalculation ItemSimilarityCalculation?
}

model ItemSimilarity {
  id           Int      @id @default(autoincrement())
  itemId       Int
  targetItemId Int
  score        Float
  item         Item     @relation("item", fields: [itemId], references: [id])
  targetItem   Item     @relation("targetItem", fields: [targetItemId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([itemId, targetItemId])
  @@index(itemId)
}

model ItemSimilarityCalculation {
  id        Int      @id @default(autoincrement())
  itemId    Int      @unique
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
