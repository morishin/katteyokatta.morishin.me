generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native", "darwin", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String   @id @default(cuid())
  userId            Int      @map("userid")
  type              String
  provider          String
  providerAccountId String   @map("provideraccountid")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("createdat")
  updatedAt         DateTime @updatedAt @map("updatedat")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("sessiontoken")
  userId       Int      @map("userid")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("createdat")
  updatedAt    DateTime @updatedAt @map("updatedat")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  email         String?
  emailVerified DateTime? @map("emailverified")
  image         String?
  associateTag  String?   @map("associatetag")
  createdAt     DateTime  @default(now()) @map("createdat")
  updatedAt     DateTime  @updatedAt @map("updatedat")
  accounts      Account[]
  posts         Post[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("createdat")
  updatedAt  DateTime @updatedAt @map("updatedat")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("userid")
  itemId    Int      @map("itemid")
  comment   String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @updatedAt @map("updatedat")
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([userId])
  @@map("posts")
}

model Item {
  id                    Int                        @id @default(autoincrement())
  asin                  String                     @unique
  name                  String                     @db.VarChar(1000)
  image                 String?
  createdAt             DateTime                   @default(now()) @map("createdat")
  updatedAt             DateTime                   @updatedAt @map("updatedat")
  similarities          ItemSimilarity[]           @relation("item")
  reversedSimilarities  ItemSimilarity[]           @relation("targetitem")
  similarityCalculation ItemSimilarityCalculation?
  posts                 Post[]

  @@map("items")
}

model ItemSimilarity {
  id           Int      @id @default(autoincrement())
  itemId       Int      @map("itemid")
  targetItemId Int      @map("targetitemid")
  score        Float
  createdAt    DateTime @default(now()) @map("createdat")
  updatedAt    DateTime @updatedAt @map("updatedat")
  item         Item     @relation("item", fields: [itemId], references: [id])
  targetItem   Item     @relation("targetitem", fields: [targetItemId], references: [id])

  @@unique([itemId, targetItemId])
  @@index([itemId])
  @@map("item_similarities")
}

model ItemSimilarityCalculation {
  id        Int      @id @default(autoincrement())
  itemId    Int      @unique @map("itemid")
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @updatedAt @map("updatedat")
  item      Item     @relation(fields: [itemId], references: [id])

  @@map("item_similarity_calculations")
}
